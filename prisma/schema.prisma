// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id                              String                      @id @default(uuid())
    first_name                      String
    last_name                       String?
    profile_theme_color             String?
    profile_picture                 String?    
    banner_picture                  String?
    biograph                        String?
    birth_date                      DateTime?                    @db.Date
    created_at                      DateTime                    @default(now())
    updated_at                      DateTime                    @default(now())
    is_deleted                      Boolean                     @default(false)
    credentials                     UserCredentials?
    visibility_configuration        UserVisibilityConfig?
    addresses                       UserAddress[]
    followers                       Follow[]                    @relation("from_user")
    following                       Follow[]                    @relation("to_user")
    from_follow_requests            FollowRequest[]             @relation("from_user")
    to_follow_requests              FollowRequest[]             @relation("to_user")
    member_of                       GroupMember[]
    group_join_requests             GroupMemberRequest[]
    posts                           Post[]

    @@map("users")
}

model UserCredentials {
    user_id                         String                      @id
    name                            String
    email                           String                      @unique
    password                        String
    phone_number                    String?
    last_login                      DateTime?   
    last_logout                     DateTime?
    user                            User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@map("user_credentials")
}

model UserVisibilityConfig {
    user_id                         String                      @id
    profile_visibility              String
    address_visibility              String
    poi_folder_visibility           String
    visited_poi_visibility          String
    post_visibility                 String
    user                            User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@map("user_visibility_configs")
}

model UserAddress {
    id                              String                      @id @default(uuid())
    name                            String
    area                            String
    sub_area                        String
    locality                        String
    latitude                        Decimal
    longitude                       Decimal
    country_code                    String
    main                            Boolean
    created_at                      DateTime                    @default(now())
    updated_at                      DateTime                    @default(now())
    is_deleted                      Boolean                     @default(false)
    user_id                         String
    user                            User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@map("user_addresses")
}

model Follow {
    id                              String                      @id @default(uuid())
    from_user_id                    String
    to_user_id                      String
    followed_at                     DateTime                    @default(now())
    from_user                       User                        @relation("from_user", fields: [from_user_id], references: [id], onDelete: Cascade)
    to_user                         User                        @relation("to_user", fields: [to_user_id], references: [id], onDelete: Cascade)

    @@map("follows")
}

model FollowRequest {
    id                              String                      @id @default(uuid())
    from_user_id                    String
    to_user_id                      String
    requested_on                    DateTime                    @default(now())
    from_user                       User                        @relation("from_user", fields: [from_user_id], references: [id], onDelete: Cascade)
    to_user                         User                        @relation("to_user", fields: [to_user_id], references: [id], onDelete: Cascade)

    @@map("follow_requests")
}

model Group {
    id                              String                      @id @default(uuid())
    name                            String
    about                           String?
    group_picture                   String?
    banner_picture                  String?
    created_at                      DateTime                    @default(now())
    updated_at                      DateTime                    @default(now())
    is_deleted                      Boolean                     @default(false)
    visibility_configuration        GroupVisibilityConfig?
    members                         GroupMember[]
    join_requests                   GroupMemberRequest[]
    roles                           GroupRole[]
    history                         GroupLog[]
    posts                           Post[]

    @@map("groups")
}

model GroupVisibilityConfig {
    group_id                        String                      @id
    post_visibility                 String
    event_visibility                String
    group_visibility                String
    group                           Group                       @relation(fields: [group_id], references: [id], onDelete: Cascade)

    @@map("group_visibility_configs")
}

model GroupMember {
    id                              String                      @id @default(uuid())
    is_creator                      Boolean
    joined_at                       DateTime                    @default(now())
    group_id                        String
    user_id                         String
    group_role_id                   String?
    group                           Group                       @relation(fields: [group_id], references: [id], onDelete: Cascade)
    user                            User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    group_role                      GroupRole?                  @relation(fields: [group_role_id], references: [id], onDelete: SetNull)

    @@map("group_members")
}

model GroupMemberRequest {
    id                              String                      @id @default(uuid())
    group_id                        String
    user_id                         String
    requested_on                    DateTime                    @default(now())
    user                            User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    group                           Group                       @relation(fields: [group_id], references: [id], onDelete: Cascade)

    @@map("group_member_requests")
}

model GroupRole {
    id                              String                      @id @default(uuid())
    name                            String
    hex_color                       String
    created_at                      DateTime                    @default(now())
    updated_at                      DateTime                    @default(now())
    is_immutable                    Boolean                     @default(false)
    group_id                        String?                     
    permissions                     GroupRolePermission[]
    group_members                   GroupMember[]
    group                           Group?                      @relation(fields: [group_id], references: [id], onDelete: Cascade)

    @@map("group_roles")
}

model GroupRolePermission {
    group_role_id                   String
    group_permission_id             String
    group_role                      GroupRole                   @relation(fields: [group_role_id], references: [id], onDelete: Cascade)
    group_permission                GroupPermission             @relation(fields: [group_permission_id], references: [id])

    @@id(fields: [group_permission_id, group_role_id])
    @@map("group_role_permissions")
}

model GroupPermission {
    id                              String                      @id @default(uuid())
    name                            String
    group_role_permission           GroupRolePermission[]

    @@map("group_permissions")
}

model GroupLog {
    id                              String                      @id @default(uuid())
    group_id                        String
    text                            String
    occurred_at                     DateTime                    @default(now())
    group                           Group                       @relation(fields: [group_id], references: [id], onDelete: Cascade)

    @@map("group_logs")
}

model Post {
    id                              String                      @id @default(uuid())
    title                           String
    content                         String
    visibility                      String
    thread_id                       String
    depth_level                     Int                         @default(0)
    user_id                         String
    group_id                        String?
    parent_id                       String?
    created_at                      DateTime                    @default(now())
    updated_at                      DateTime                    @default(now())
    attachments                     PostAttachment[]
    thread                          PostThread                  @relation("posts", fields: [thread_id], references: [id])
    creator                         User                        @relation(fields: [user_id], references: [id])
    group                           Group?                      @relation(fields: [group_id], references: [id])
    children_posts                  Post[]                      @relation("parent_post")
    parent_post                     Post?                       @relation("parent_post", fields: [parent_id], references: [id])

    @@map("posts")
}

model PostAttachment {
    id                              String                      @id @default(uuid())
    file_path                       String
    file_type                       String
    post_id                         String
    post                            Post                        @relation(fields: [post_id], references: [id])

    @@map("post_attachments")
}

model PostThread {
    id                              String                      @id @default(uuid())
    max_depth_level                 Int                         @default(0)
    posts                           Post[]                      @relation("posts")

    @@map("post_threads")
}