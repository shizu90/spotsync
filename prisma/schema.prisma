// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id                  String      @id @default(uuid())
    profile_picture     String?    
    banner_picture      String?
    biograph            String?
    birth_date          DateTime    @db.Date
    profile_visibility  String
    created_at          DateTime    @default(now())
    updated_at          DateTime    @default(now())
    is_deleted          Boolean     @default(false)
    credentials         UserCredentials?
    addresses           UserAddress[]
    followers           Follow[]    @relation("from_user")
    following           Follow[]    @relation("to_user")

    @@map("users")
}

model UserCredentials {
    user_id             String      @id
    name                String
    email               String      @unique
    password            String
    last_login          DateTime?   
    last_logout         DateTime?
    user                User        @relation(fields: [user_id], references: [id])

    @@map("user_credentials")
}

model UserAddress {
    id                  String      @id @default(uuid())
    name                String
    area                String
    sub_area            String
    locality            String
    latitude            Decimal
    longitude           Decimal
    country_code        String
    main                Boolean
    created_at          DateTime    @default(now())
    updated_at          DateTime    @default(now())
    is_deleted          Boolean     @default(false)
    user_id             String
    user                User        @relation(fields: [user_id], references: [id])

    @@map("user_addresses")
}

model Follow {
    id                  String    @id @default(uuid())
    from_user_id        String
    to_user_id          String
    from_user           User      @relation("from_user", fields: [from_user_id], references: [id])
    to_user             User      @relation("to_user", fields: [to_user_id], references: [id])

    @@map("follow")
}