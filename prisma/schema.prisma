generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "prismaSchemaFolder"]
  binaryTargets = "linux-musl-openssl-3.0.x"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                @id @default(uuid())
  created_at               DateTime              @default(now())
  updated_at               DateTime              @default(now())
  is_deleted               Boolean               @default(false)
  status                   String?               @db.VarChar(3)
  followers                Follow[]              @relation("from_user")
  following                Follow[]              @relation("to_user")
  member_of                GroupMember[]
  likes                    Like[]
  posts                    Post[]
  spots                    Spot[]
  addresses                UserAddress[]
  credentials              UserCredentials?
  visibility_settings      UserVisibilitySettings?
  profile                  UserProfile?
  visited_spots            VisitedSpot[]
  password_recoveries      PasswordRecovery[]
  activation_requests      ActivationRequest[]
  comments                 Comment[]
  spot_folders             SpotFolder[]
  favorites                Favorite[]
  spot_events              SpotEvent[]
  spot_event_participation SpotEventParticipant[]
  notifications            Notification[]
  ratings                  Rating[]

  @@map("users")
}

model UserCredentials {
  user_id      String    @id
  name         String    @unique @db.VarChar(255)
  email        String    @unique
  password     String    @db.VarChar(400)
  last_login   DateTime?
  phone_number String?   @db.VarChar(20)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_credentials")
}

model UserVisibilitySettings {
  user_id               String @id
  addresses             String @db.VarChar(12)
  favorite_spot_events  String @db.VarChar(12)
  favorite_spot_folders String @db.VarChar(12)
  favorite_spots        String @db.VarChar(12)
  posts                 String @db.VarChar(12)
  profile               String @db.VarChar(12)
  spot_folders          String @db.VarChar(12)
  visited_spots         String @db.VarChar(12)
  user                  User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_visibility_settings")
}

model UserProfile {
  user_id               String   @id
  profile_picture       String?  @db.Text
  banner_picture        String?  @db.Text
  biograph              String?  @db.VarChar(400)
  birth_date            DateTime?
  display_name          String?  @db.VarChar(255)
  theme_color           String?  @db.VarChar(7)
  visibility            String   @db.VarChar(12)
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserAddress {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(255)
  area         String   @db.VarChar(255)
  sub_area     String   @db.VarChar(255)
  locality     String   @db.VarChar(255)
  latitude     Decimal  @db.Decimal(9, 6)
  longitude    Decimal  @db.Decimal(9, 6)
  country_code String   @db.Char(2)
  main         Boolean
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  user_id      String
  is_deleted   Boolean  @default(false)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model Follow {
  id           String   @id @default(uuid())
  from_user_id String
  to_user_id   String
  status       String   @db.VarChar(3)
  followed_at  DateTime?
  requested_at DateTime?
  from_user    User     @relation("from_user", fields: [from_user_id], references: [id], onDelete: Cascade)
  to_user      User     @relation("to_user", fields: [to_user_id], references: [id], onDelete: Cascade)

  @@map("follows")
}

model Group {
  id                       String                 @id @default(uuid())
  name                     String                 @db.VarChar(255)
  about                    String?                @db.VarChar(400)
  group_picture            String?                @db.VarChar(400)
  banner_picture           String?                @db.VarChar(400)
  created_at               DateTime               @default(now())
  updated_at               DateTime               @default(now())
  is_deleted               Boolean                @default(false)
  history                  GroupLog[]
  members                  GroupMember[]
  roles                    GroupRole[]
  visibility_settings      GroupVisibilitySettings?
  posts                    Post[]
  events                   SpotEvent[]

  @@map("groups")
}

model GroupVisibilitySettings {
  group_id    String @id
  groups      String @db.VarChar(12)
  posts       String @db.VarChar(12)
  spot_events String @db.VarChar(12)
  group       Group  @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@map("group_visibility_settings")
}

model GroupMember {
  id            String     @id @default(uuid())
  is_creator    Boolean
  joined_at     DateTime?
  requested_at  DateTime?
  group_id      String
  user_id       String
  group_role_id String?
  status        String     @db.VarChar(3)
  group         Group      @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_role    GroupRole? @relation(fields: [group_role_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("group_members")
}

model GroupRole {
  id            String                @id @default(uuid())
  name          String                @db.VarChar(255)
  hex_color     String                @db.VarChar(7)
  created_at    DateTime              @default(now())
  updated_at    DateTime              @default(now())
  is_immutable  Boolean               @default(false)
  group_id      String?
  group_members GroupMember[]
  permissions   GroupRolePermission[]
  group         Group?                @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@map("group_roles")
}

model GroupRolePermission {
  group_role_id       String
  group_permission_id String
  group_permission    GroupPermission @relation(fields: [group_permission_id], references: [id])
  group_role          GroupRole       @relation(fields: [group_role_id], references: [id], onDelete: Cascade)

  @@id([group_permission_id, group_role_id])
  @@map("group_role_permissions")
}

model GroupPermission {
  id                    String                @id @default(uuid())
  name                  String                @db.VarChar(255)
  group_role_permission GroupRolePermission[]

  @@map("group_permissions")
}

model GroupLog {
  id          String   @id @default(uuid())
  group_id    String
  text        String   @db.VarChar(400)
  occurred_at DateTime @default(now())
  group       Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@map("group_logs")
}

model Post {
  id             String           @id @default(uuid())
  title          String           @db.VarChar(255)
  content        String
  visibility     String           @db.VarChar(12)
  user_id        String
  group_id       String?
  parent_id      String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  depth_level    Int              @default(0)
  thread_id      String
  total_likes    Int              @default(0)
  attachments    PostAttachment[]
  group          Group?           @relation(fields: [group_id], references: [id], onDelete: Cascade)
  parent_post    Post?            @relation("parent_post", fields: [parent_id], references: [id], onDelete: Cascade)
  children_posts Post[]           @relation("parent_post")
  thread         PostThread       @relation("posts", fields: [thread_id], references: [id], onDelete: Cascade)
  creator        User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes          Like[]

  @@map("posts")
}

model PostAttachment {
  id        String @id @default(uuid())
  post_id   String
  file_path String @db.VarChar(400)
  file_type String @db.VarChar(12)
  post      Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("post_attachments")
}

model PostThread {
  id              String @id @default(uuid())
  max_depth_level Int    @default(0)
  posts           Post[] @relation("posts")

  @@map("post_threads")
}

model Like {
  id              String   @id @default(uuid())
  likable_subject String   @db.VarChar(12)
  post_id         String?
  comment_id      String?
  created_at      DateTime @default(now())
  user_id         String
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post            Post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment         Comment?  @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Spot {
  id           String          @id @default(uuid())
  name         String          @db.VarChar(255)
  description  String?         @db.VarChar(400)
  type         String          @db.VarChar(120)
  is_deleted   Boolean         @default(false)
  creator_id   String
  created_at   DateTime        @default(now())
  updated_at   DateTime        @default(now())
  address      SpotAddress?
  photos       SpotPhoto[]
  creator      User            @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  visited_by   VisitedSpot[]
  spot_folders SpotFolderItem[]
  favorites    Favorite[]
  comments     Comment[]
  events       SpotEvent[]
  ratings      Rating[]

  @@map("spots")
}

model SpotPhoto {
  id        String @id @default(uuid())
  spot_id   String
  file_path String @db.VarChar(400)
  spot      Spot   @relation(fields: [spot_id], references: [id], onDelete: Cascade)

  @@map("spot_photos")
}

model SpotAddress {
  spot_id      String  @id
  area         String  @db.VarChar(255)
  sub_area     String  @db.VarChar(255)
  locality     String? @db.VarChar(255)
  latitude     Decimal @db.Decimal(9, 6)
  longitude    Decimal @db.Decimal(9, 6)
  country_code String  @db.Char(2)
  spot         Spot    @relation(fields: [spot_id], references: [id])

  @@map("spot_addresses")
}

model Comment {
  id           String   @id @default(uuid())
  text         String   @db.VarChar(400)
  subject      String   @db.VarChar(20)
  user_id      String
  spot_id      String?
  spot_event_id String?
  total_likes  Int      @default(0)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  spot         Spot?     @relation(fields: [spot_id], references: [id], onDelete: Cascade)
  likes        Like[]

  @@map("comments")
}

model VisitedSpot {
  id         String   @id @default(uuid())
  user_id    String
  spot_id    String
  visited_at DateTime @default(now())
  spot       Spot     @relation(fields: [spot_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("visited_spots")
}

model PasswordRecovery {
  id         String   @id @default(uuid())
  user_id    String
  status     String   @db.VarChar(3)
  token      String   @db.VarChar(32)
  created_at DateTime @default(now())
  expires_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_recoveries")
}

model ActivationRequest {
  id              String   @id @default(uuid())
  user_id         String
  code            String?  @db.VarChar(8)
  status          String   @db.VarChar(3)
  subject         String   @db.VarChar(20)
  requested_at    DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("activation_requests")
}

model SpotFolder {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(255)
  description  String?  @db.VarChar(400)
  hex_color    String   @db.VarChar(7)
  visibility   String   @db.VarChar(12)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  user_id      String
  creator      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  spots        SpotFolderItem[]
  favorites    Favorite[]
  ratings      Rating[]

  @@map("spot_folders")
}

model SpotFolderItem {
  spot_folder_id String
  spot_id        String
  added_at       DateTime   @default(now())
  order_number   Int
  spot_folder    SpotFolder @relation(fields: [spot_folder_id], references: [id], onDelete: Cascade)
  spot           Spot       @relation(fields: [spot_id], references: [id], onDelete: Cascade)

  @@id([spot_folder_id, spot_id])
  @@map("spot_folder_items")
}

model Favorite {
  id              String   @id @default(uuid())
  subject         String   @db.VarChar(120)
  spot_id         String?
  spot_folder_id  String?
  spot_event_id   String?
  user_id         String
  created_at      DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  spot            Spot?    @relation(fields: [spot_id], references: [id], onDelete: Cascade)
  spot_folder     SpotFolder? @relation(fields: [spot_folder_id], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model SpotEvent {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(255)
  description  String?  @db.VarChar(400)
  start_date   DateTime
  end_date     DateTime
  status       String   @db.VarChar(12)
  visibility   String   @db.VarChar(12)
  spot_id      String
  group_id     String?
  user_id      String
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  spot         Spot     @relation(fields: [spot_id], references: [id], onDelete: Cascade)
  group        Group?   @relation(fields: [group_id], references: [id], onDelete: Cascade)
  creator      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  participants SpotEventParticipant[]
  ratings      Rating[]

  @@map("spot_events")
}

model SpotEventParticipant {
  spot_event_id   String
  user_id         String
  participated_at DateTime @default(now())
  user            User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  spot_event      SpotEvent  @relation(fields: [spot_event_id], references: [id], onDelete: Cascade)

  @@id([spot_event_id, user_id])
  @@map("spot_event_participants")
}

model Notification {
  id           String   @id @default(uuid())
  user_id      String
  title        String   @db.VarChar(255)
  content      String   @db.VarChar(400)
  status       String   @db.VarChar(12)
  type         String   @db.VarChar(12)
  read_at      DateTime?
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Rating {
  id              String   @id @default(uuid())
  user_id         String
  subject         String   @db.VarChar(120)
  spot_id         String?
  spot_event_id   String?
  spot_folder_id  String?
  value           Int
  comment         String?  @db.VarChar(400)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  spot            Spot?    @relation(fields: [spot_id], references: [id], onDelete: Cascade)
  spot_event      SpotEvent? @relation(fields: [spot_event_id], references: [id], onDelete: Cascade)
  spot_folder     SpotFolder? @relation(fields: [spot_folder_id], references: [id], onDelete: Cascade)

  @@map("ratings")
}
